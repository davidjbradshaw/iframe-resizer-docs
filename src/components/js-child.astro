    <script>/*!
 *  @preserve
 *  
 *  @module     iframe-resizer/child 5.0.0 (iife) 
 *
 *  @license    GPL-3.0 for non-commercial use only.
 *              For commercial use, you must purchase a license from
 *              http://iframe-resizer.com/pricing
 * 
 *  @desciption Keep same and cross domain iFrames sized to their content 
 *
 *  @author     David J. Bradshaw <dave@bradshaw.net>
 * 
 *  @see        {@link http://iframe-resizer.com}
 * 
 *  @copyright  (c) 2013 - 2024, David J. Bradshaw. All rights reserved.
 */


(function () {
  'use strict';

  const VERSION = '5.0.0-alpha.12';

  const BASE = 10;
  const SIZE_ATTR = 'data-iframe-size';

  const addEventListener = (el, evt, func, options) =>
    el.addEventListener(evt, func, options || false);

  const removeEventListener = (el, evt, func) =>
    el.removeEventListener(evt, func, false);

  const checkVisibilityOptions = {
    contentVisibilityAuto: true,
    opacityProperty: true,
    visibilityProperty: true,
  };
  const customCalcMethods = {
    height: () => {
      warn('Custom height calculation function not defined');
      return getHeight.auto()
    },
    width: () => {
      warn('Custom width calculation function not defined');
      return getWidth.auto()
    },
  };
  const deprecatedResizeMethods = {
    bodyOffset: 1,
    bodyScroll: 1,
    offset: 1,
    documentElementOffset: 1,
    documentElementScroll: 1,
    documentElementBoundingClientRect: 1,
    max: 1,
    min: 1,
    grow: 1,
    lowestElement: 1,
  };
  const eventCancelTimer = 128;
  const eventHandlersByName = {};
  const hasCheckVisibility = 'checkVisibility' in window;
  const heightCalcModeDefault = 'auto';
  const nonLoggableTriggerEvents = { reset: 1, resetPage: 1, init: 1 };
  const msgID = '[iFrameSizer]'; // Must match host page msg ID
  const msgIdLen = msgID.length;
  const resetRequiredMethods = {
    max: 1,
    min: 1,
    bodyScroll: 1,
    documentElementScroll: 1,
  };
  const resizeObserveTargets = ['body'];
  const widthCalcModeDefault = 'scroll';

  let autoResize = true;
  let bodyBackground = '';
  let bodyMargin = 0;
  let bodyMarginStr = '';
  let bodyObserver = null;
  let bodyPadding = '';
  let calculateHeight = true;
  let calculateWidth = false;
  let calcElements = null;
  let check;
  let firstRun = true;
  let hasTags = false;
  let height = 1;
  let heightCalcMode = heightCalcModeDefault; // only applys if not provided by host page (V1 compatibility)
  let initLock = true;
  let initMsg = '';
  let inPageLinks = {};
  let isInit = true;
  let logging = false;
  let mode = 0;
  let modeSet = false;
  let mouseEvents = false;
  let myID = '';
  let offsetHeight = 0;
  let offsetWidth = 0;
  let resizeFrom = 'child';
  let resizeObserver = null;
  let sameDomian = false;
  let target = window.parent;
  let targetOriginDefault = '*';
  let tolerance = 0;
  let triggerLocked = false;
  let version;
  let width = 1;
  let widthCalcMode = widthCalcModeDefault;
  let win = window;

  let onMessage = () => {
    warn('onMessage function not defined');
  };
  let onReady = () => {};
  let onPageInfo = null;
  let onParentInfo = null;

  const capitalizeFirstLetter = (string) =>
    string.charAt(0).toUpperCase() + string.slice(1);

  const isDef = (value) => `${value}` !== '' && value !== undefined;

  function getElementName(el) {
    switch (true) {
      case !isDef(el):
        return ''

      case isDef(el.id):
        return `${el.nodeName.toUpperCase()}#${el.id}`

      case isDef(el.name):
        return `${el.nodeName.toUpperCase()} (${el.name})`

      default:
        return (
          el.nodeName.toUpperCase() +
          (isDef(el.className) ? `.${el.className}` : '')
        )
    }
  }

  function elementSnippet(el) {
    const outer = el?.outerHTML?.toString();

    if (!outer) return el

    return outer.length < 30
      ? outer
      : `${outer.slice(0, 30).replaceAll('\n', ' ')}...`
  }

  const rot = (s) =>
    s.replaceAll(/[A-Za-z]/g, (c) =>
      String.fromCodePoint(
        (c <= 'Z' ? 90 : 122) >= (c = c.codePointAt(0) + 19) ? c : c - 26, // eslint-disable-line no-cond-assign
      ),
    );

  const encode = (s) =>
    s
      .replaceAll('<br>', '\n')
      .replaceAll('<rb>', '\u001B[31;1m')
      .replaceAll('</>', '\u001B[m')
      .replaceAll('<b>', '\u001B[1m')
      .replaceAll('<i>', '\u001B[3m')
      .replaceAll('<u>', '\u001B[4m');

  const remove = (s) => s.replaceAll('<br>', '\n').replaceAll(/<[/a-z]+>/gi, '');

  // TODO: remove .join(' '), requires major test updates
  const formatLogMsg = (...msg) => [`${msgID}[${myID}]`, ...msg].join(' ');

  const formatAdvise = (...msg) =>
    window.chrome // Only show formatting in Chrome as not supported in other browsers
      ? encode(formatLogMsg(...msg))
      : remove(formatLogMsg(...msg));

  const log = (...msg) =>
    // eslint-disable-next-line no-console
    logging && console?.log(formatLogMsg(...msg));

  // const info = (...msg) =>
  //   // eslint-disable-next-line no-console
  //   console?.info(formatAdvise(...msg))

  const warn = (...msg) =>
    // eslint-disable-next-line no-console
    console?.warn(formatLogMsg(...msg));

  const advise = (...msg) =>
    // eslint-disable-next-line no-console
    console?.warn(formatAdvise(...msg));

  const adviser = (msg) => advise(rot(msg));

  function init() {
    checkCrossDomain();
    readDataFromParent();
    log(`Initialising iFrame v${VERSION} (${window.location.href})`);
    readDataFromPage();
    setMode();
    setMargin();
    setBodyStyle('background', bodyBackground);
    setBodyStyle('padding', bodyPadding);
    injectClearFixIntoBodyElement();
    stopInfiniteResizingOfIFrame();
    checkMode();
    checkHeightMode();
    checkWidthMode();
    checkDeprecatedAttrs();
    checkHasDataSizeAttributes();
    setupCalcElements();
    setupPublicMethods();
    setupMouseEvents();
    startEventListeners();
    inPageLinks = setupInPageLinks();
    sendSize('init', 'Init message from host page');
    onReady();
    isInit = false;
  }

  function checkCrossDomain() {
    try {
      sameDomian = 'iframeParentListener' in window.parent;
    } catch (error) {
      log('Cross domain iframe detected.');
    }
  }

  function readDataFromParent() {
    const strBool = (str) => str === 'true';
    const data = initMsg.slice(msgIdLen).split(':');

    myID = data[0]; // eslint-disable-line prefer-destructuring
    bodyMargin = undefined === data[1] ? bodyMargin : Number(data[1]); // For V1 compatibility
    calculateWidth = undefined === data[2] ? calculateWidth : strBool(data[2]);
    logging = undefined === data[3] ? logging : strBool(data[3]);
    // data[4] no longer used (was intervalTimer)
    autoResize = undefined === data[6] ? autoResize : strBool(data[6]);
    bodyMarginStr = data[7]; // eslint-disable-line prefer-destructuring
    heightCalcMode = undefined === data[8] ? heightCalcMode : data[8];
    bodyBackground = data[9]; // eslint-disable-line prefer-destructuring
    bodyPadding = data[10]; // eslint-disable-line prefer-destructuring
    tolerance = undefined === data[11] ? tolerance : Number(data[11]);
    inPageLinks.enable = undefined === data[12] ? false : strBool(data[12]);
    resizeFrom = undefined === data[13] ? resizeFrom : data[13];
    widthCalcMode = undefined === data[14] ? widthCalcMode : data[14];
    mouseEvents = undefined === data[15] ? mouseEvents : strBool(data[15]);
    offsetHeight = undefined === data[16] ? offsetHeight : Number(data[16]);
    offsetWidth = undefined === data[17] ? offsetWidth : Number(data[17]);
    calculateHeight = undefined === data[18] ? calculateHeight : strBool(data[18]);
    check = data[19]; // eslint-disable-line prefer-destructuring
    version = data[20]; // eslint-disable-line prefer-destructuring
    modeSet = undefined === data[21] ? modeSet : strBool(data[21]);
  }

  function readDataFromPage() {
    function readData() {
      const data = window.iFrameResizer;

      log(`Reading data from page: ${JSON.stringify(data)}`);

      onMessage = data?.onMessage || onMessage;
      onReady = data?.onReady || onReady;
      offsetHeight = data?.offsetHeight || offsetHeight;
      offsetWidth = data?.offsetWidth || offsetWidth;
      targetOriginDefault = data?.targetOrigin || targetOriginDefault;
      heightCalcMode = data?.heightCalculationMethod || heightCalcMode;
      widthCalcMode = data?.widthCalculationMethod || widthCalcMode;
    }

    function setupCustomCalcMethods(calcMode, calcFunc) {
      if (typeof calcMode === 'function') {
        log(`Setup custom ${calcFunc}CalcMethod`);
        customCalcMethods[calcFunc] = calcMode;
        calcMode = 'custom';
      }

      return calcMode
    }

    if (
      'iFrameResizer' in window &&
      Object === window.iFrameResizer.constructor
    ) {
      readData();
      heightCalcMode = setupCustomCalcMethods(heightCalcMode, 'height');
      widthCalcMode = setupCustomCalcMethods(widthCalcMode, 'width');
    }

    log(`TargetOrigin for parent set to: ${targetOriginDefault}`);
  }

  function chkCSS(attr, value) {
    if (value.includes('-')) {
      warn(`Negative CSS value ignored for ${attr}`);
      value = '';
    }

    return value
  }

  function setBodyStyle(attr, value) {
    if (undefined !== value && value !== '' && value !== 'null') {
      document.body.style.setProperty(attr, value);
      log(`Body ${attr} set to "${value}"`);
    }
  }

  function setMargin() {
    // If called via V1 script, convert bodyMargin from int to str
    if (undefined === bodyMarginStr) {
      bodyMarginStr = `${bodyMargin}px`;
    }

    setBodyStyle('margin', chkCSS('margin', bodyMarginStr));
  }

  function stopInfiniteResizingOfIFrame() {
    const setAutoHeight = (el) =>
      el.style.setProperty('height', 'auto', 'important');

    setAutoHeight(document.documentElement);
    setAutoHeight(document.body);

    log('HTML & body height set to "auto !important"');
  }

  function manageTriggerEvent(options) {
    const listener = {
      add(eventName) {
        function handleEvent() {
          sendSize(options.eventName, options.eventType);
        }

        eventHandlersByName[eventName] = handleEvent;

        addEventListener(window, eventName, handleEvent, { passive: true });
      },
      remove(eventName) {
        const handleEvent = eventHandlersByName[eventName];
        delete eventHandlersByName[eventName];

        removeEventListener(window, eventName, handleEvent);
      },
    };

    listener[options.method](options.eventName);

    log(
      `${capitalizeFirstLetter(options.method)} event listener: ${
      options.eventType
    }`,
    );
  }

  function manageEventListeners(method) {
    manageTriggerEvent({
      method,
      eventType: 'After Print',
      eventName: 'afterprint',
    });

    manageTriggerEvent({
      method,
      eventType: 'Before Print',
      eventName: 'beforeprint',
    });

    manageTriggerEvent({
      method,
      eventType: 'Ready State Change',
      eventName: 'readystatechange',
    });

    //   manageTriggerEvent({
    //     method: method,
    //     eventType: 'Orientation Change',
    //     eventName: 'orientationchange'
    //   })
  }

  function checkDeprecatedAttrs() {
    let found = false;

    const checkAttrs = (attr) =>
      document.querySelectorAll(`[${attr}]`).forEach((el) => {
        found = true;
        el.removeAttribute(attr);
        el.setAttribute(SIZE_ATTR, null);
      });

    checkAttrs('data-iframe-height');
    checkAttrs('data-iframe-width');

    if (found) {
      advise(`
<rb>Deprecated Attributes</>
          
The <b>data-iframe-height</> and <b>data-iframe-width</> attributes have been deprecated and replaced with the single <b>data-iframe-size</> attribute. Use of the old attributes will be removed in a future version of <i>iframe-resizer</>.`);
    }
  }

  function checkHasDataSizeAttributes() {
    if (document.querySelectorAll(`[${SIZE_ATTR}]`).length > 0) {
      if (heightCalcMode === 'auto') {
        heightCalcMode = 'autoOverflow';
        log(
          'data-iframe-size attribute found on page, using "autoOverflow" calculation method for height',
        );
      }
      if (widthCalcMode === 'auto') {
        widthCalcMode = 'autoOverflow';
        log(
          'data-iframe-size attribute found on page, using "autoOverflow" calculation method for width',
        );
      }
    }
  }

  function setMode() {
    mode = [
      '1jqr0si6pnt',
      'tw4ra3kya',
      'gz3au7jfuk',
      '1irylf8sei5',
      '1p37k9w4kov', // α
    ].indexOf(check);
    if (mode === -1 && check !== '') mode = -2;
    if (modeSet || !version) mode = 9;
    log('Mode set to', mode, modeSet, version);
  }

  function setupCalcElements() {
    const taggedElements = document.querySelectorAll(`[${SIZE_ATTR}]`);
    hasTags = taggedElements.length > 0;
    calcElements = hasTags ? taggedElements : getAllElements(document)();
  }

  function checkCalcMode(calcMode, calcModeDefault, modes, type) {
    if (calcModeDefault !== calcMode) {
      if (!(calcMode in modes)) {
        warn(`${calcMode} is not a valid option for ${type}CalculationMethod.`);
        calcMode = calcModeDefault;
      }
      if (calcMode in deprecatedResizeMethods) {
        advise(`
<rb>Deprecated ${type}CalculationMethod (${calcMode})</>

This version of <i>iframe-resizer</> can auto detect the most suitable ${type} calculation method. It is recommended that you remove this option.`);
      }
      log(`${type} calculation method set to "${calcMode}"`);
    }

    return calcMode
  }

  function checkHeightMode() {
    heightCalcMode = checkCalcMode(
      heightCalcMode,
      heightCalcModeDefault,
      getHeight,
      'height',
    );
  }

  function checkWidthMode() {
    widthCalcMode = checkCalcMode(
      widthCalcMode,
      widthCalcModeDefault,
      getWidth,
      'width',
    );
  }

  const modeData = [
    '<iy><yi>Puchspk Spjluzl Rlf</><iy><iy>',
    '<iy><yi>Tpzzpun Spjluzl Rlf</><iy><iy>',
    "Aopz spiyhyf pz hchpshisl dpao ivao Jvttlyjphs huk Vwlu-Zvbylz spjluzlz.<iy><iy><i>Jvttlyjphs Spjluzl</><iy>Mvy jvttlyjphs bzl, <p>pmyhtl-ylzpgly</> ylxbpylz h svd jvza vul aptul spjluzl mll. Mvy tvyl pumvythapvu cpzpa <b>oaaw://pmyhtl-ylzpgly.jvt/wypjpun</>.<iy><iy><i>Vwlu Zvbyjl Spjluzl</><iy>Pm fvb hyl bzpun aopz spiyhyf pu h uvu-jvtlyjphs vwlu zvbyjl wyvqlja, fvb jhu bzl pa mvy myll bukly aol alytz vm aol NWS C3 Spjluzl. Av jvumpyt fvb hjjlwa aolzl alytz, wslhzl zla aol <i>spjlujl</> rlf pu pmyhtlYlzpgl vwapvuz av <i>'NWS-C3'</>.<iy><iy>Mvy tvyl pumvythapvu vu aol Nub Wbispj Spjluzl <iy><b>oaaw://pmyhtl-ylzpgly.jvt/vwlu-zvbyjl-spjluzl</>",
    '<i>NWS-C3 Spjluzl Clyzpvu</><iy><iy>Aopz clyzpvu vm <p>pmyhtl-ylzpgly</> pz ilpun bzlk bukly aol alytz vm aol <i>NWS C3</> spjluzl. Pm fvb hyl bzpun aopz spiyhyf pu h jvttlyjphs wyvqlja, fvb dpss ullk av wbyjohzl h svd jvza vul aptl spjluzl. Mvy tvyl pumvythapvu cpzpa <b>oaaw://pmyhtl-ylzpgly.jvt/wypjpun</>.',
  ];

  function checkMode() {
    if (mode < 0) return adviser(`${modeData[mode + 2]}${modeData[2]}`)
    if (mode < 2) return adviser(modeData[3])
    return 0
  }

  function startEventListeners() {
    if (autoResize !== true) {
      log('Auto Resize disabled');
      return
    }

    manageEventListeners('add');
    setupMutationObserver();
    setupResizeObserver();
  }

  function stopEventListeners() {
    manageEventListeners('remove');
    resizeObserver?.disconnect();
    bodyObserver?.disconnect();
  }

  function injectClearFixIntoBodyElement() {
    const clearFix = document.createElement('div');

    clearFix.style.clear = 'both';
    // Guard against the following having been globally redefined in CSS.
    clearFix.style.display = 'block';
    clearFix.style.height = '0';
    document.body.append(clearFix);
  }

  function setupInPageLinks() {
    const getPagePosition = () => ({
      x: document.documentElement.scrollLeft,
      y: document.documentElement.scrollTop,
    });

    function getElementPosition(el) {
      const elPosition = el.getBoundingClientRect();
      const pagePosition = getPagePosition();

      return {
        x: parseInt(elPosition.left, BASE) + parseInt(pagePosition.x, BASE),
        y: parseInt(elPosition.top, BASE) + parseInt(pagePosition.y, BASE),
      }
    }

    function findTarget(location) {
      function jumpToTarget(target) {
        const jumpPosition = getElementPosition(target);

        log(
          `Moving to in page link (#${hash}) at x: ${jumpPosition.x}y: ${jumpPosition.y}`,
        );

        sendMsg(jumpPosition.y, jumpPosition.x, 'scrollToOffset'); // X&Y reversed at sendMsg uses height/width
      }

      const hash = location.split('#')[1] || location; // Remove # if present
      const hashData = decodeURIComponent(hash);
      const target =
        document.getElementById(hashData) ||
        document.getElementsByName(hashData)[0];

      if (target !== undefined) {
        jumpToTarget(target);
        return
      }

      log(`In page link (#${hash}) not found in iFrame, so sending to parent`);
      sendMsg(0, 0, 'inPageLink', `#${hash}`);
    }

    function checkLocationHash() {
      const { hash, href } = window.location;

      if (hash !== '' && hash !== '#') {
        findTarget(href);
      }
    }

    function bindAnchors() {
      function setupLink(el) {
        function linkClicked(e) {
          e.preventDefault();

          findTarget(this.getAttribute('href'));
        }

        if (el.getAttribute('href') !== '#') {
          addEventListener(el, 'click', linkClicked);
        }
      }

      document.querySelectorAll('a[href^="#"]').forEach(setupLink);
    }

    function bindLocationHash() {
      addEventListener(window, 'hashchange', checkLocationHash);
    }

    function initCheck() {
      // Check if page loaded with location hash after init resize
      setTimeout(checkLocationHash, eventCancelTimer);
    }

    function enableInPageLinks() {
      /* istanbul ignore else */ // Not testable in phantonJS
      log('Setting up location.hash handlers');
      bindAnchors();
      bindLocationHash();
      initCheck();
    }

    if (inPageLinks.enable) {
      enableInPageLinks();
    } else {
      log('In page linking not enabled');
    }

    return {
      findTarget,
    }
  }

  function setupMouseEvents() {
    if (mouseEvents !== true) return

    function sendMouse(e) {
      sendMsg(0, 0, e.type, `${e.screenY}:${e.screenX}`);
    }

    function addMouseListener(evt, name) {
      log(`Add event listener: ${name}`);
      addEventListener(window.document, evt, sendMouse);
    }

    addMouseListener('mouseenter', 'Mouse Enter');
    addMouseListener('mouseleave', 'Mouse Leave');
  }

  function setupPublicMethods() {
    win.parentIframe = Object.freeze({
      autoResize: (resize) => {
        if (resize === true && autoResize === false) {
          autoResize = true;
          startEventListeners();
        } else if (resize === false && autoResize === true) {
          autoResize = false;
          stopEventListeners();
        }

        sendMsg(0, 0, 'autoResize', JSON.stringify(autoResize));

        return autoResize
      },

      close() {
        sendMsg(0, 0, 'close');
      },

      getId: () => myID,

      getPageInfo(callback) {
        if (typeof callback === 'function') {
          onPageInfo = callback;
          sendMsg(0, 0, 'pageInfo');
          advise(`
<rb>Deprecated Method (getPageInfo()</>
          
The <b>getPageInfo()</> method has been deprecated and replaced with  <b>getParentInfo()</>. Use of this method will be removed in a future version of <i>iframe-resizer</>.
`);
          return
        }

        onPageInfo = null;
        sendMsg(0, 0, 'pageInfoStop');
      },

      getParentInfo(callback) {
        if (typeof callback === 'function') {
          onParentInfo = callback;
          sendMsg(0, 0, 'parentInfo');
          return
        }

        onParentInfo = null;
        sendMsg(0, 0, 'parentInfoStop');
      },

      moveToAnchor(hash) {
        inPageLinks.findTarget(hash);
      },

      reset() {
        resetIFrame('parentIFrame.reset');
      },

      scrollTo(x, y) {
        sendMsg(y, x, 'scrollTo'); // X&Y reversed at sendMsg uses height/width
      },

      scrollToOffset(x, y) {
        sendMsg(y, x, 'scrollToOffset'); // X&Y reversed at sendMsg uses height/width
      },

      sendMessage(msg, targetOrigin) {
        sendMsg(0, 0, 'message', JSON.stringify(msg), targetOrigin);
      },

      setHeightCalculationMethod(heightCalculationMethod) {
        heightCalcMode = heightCalculationMethod;
        checkHeightMode();
      },

      setWidthCalculationMethod(widthCalculationMethod) {
        widthCalcMode = widthCalculationMethod;
        checkWidthMode();
      },

      setTargetOrigin(targetOrigin) {
        log(`Set targetOrigin: ${targetOrigin}`);
        targetOriginDefault = targetOrigin;
      },

      size(customHeight, customWidth) {
        const valString = `${customHeight || ''}${customWidth ? `,${customWidth}` : ''}`;

        sendSize(
          'size',
          `parentIFrame.size(${valString})`,
          customHeight,
          customWidth,
        );
      },
    });

    win.parentIFrame = win.parentIframe;
  }

  function resizeObserved(entries) {
    const el = entries[0].target;
    sendSize('resizeObserver', `resizeObserver: ${getElementName(el)}`);
  }

  const checkPositionType = (element) => {
    const style = getComputedStyle(element);
    return style?.position !== '' && style?.position !== 'static'
  };

  const getAllNonStaticElements = () =>
    [...getAllElements(document)()].filter(checkPositionType);

  function setupResizeObservers(el) {
    if (!el) return
    resizeObserver.observe(el);
    log(`Attached resizeObserver: ${getElementName(el)}`);
  }

  function createResizeObservers(el) {
  [
      ...getAllNonStaticElements(),
      ...resizeObserveTargets.flatMap((target) => el.querySelector(target)),
    ].forEach(setupResizeObservers);
  }

  function addResizeObservers(mutation) {
    if (mutation.type === 'childList') {
      createResizeObservers(mutation.target);
    }
  }

  function setupResizeObserver() {
    resizeObserver = new ResizeObserver(resizeObserved);
    createResizeObservers(window.document);
  }

  function setupBodyMutationObserver() {
    function mutationObserved(mutations) {
      // Look for injected elements that need ResizeObservers
      mutations.forEach(addResizeObservers);

      // Rebuild elements list for size calculation
      setupCalcElements();
    }

    function createMutationObserver() {
      const observer = new window.MutationObserver(mutationObserved);
      const target = document.querySelector('body');
      const config = {
        // attributes: true,
        attributes: false,
        attributeOldValue: false,
        // characterData: true,
        characterData: false,
        characterDataOldValue: false,
        childList: true,
        subtree: true,
      };

      log('Create <body/> MutationObserver');
      observer.observe(target, config);

      return observer
    }

    const observer = createMutationObserver();

    return {
      disconnect() {
        log('Disconnect MutationObserver');
        observer.disconnect();
      },
    }
  }

  function setupMutationObserver() {
    bodyObserver = setupBodyMutationObserver();
  }

  // Idea from https://github.com/guardian/iframe-messenger
  function getMaxElement(side) {
    const Side = capitalizeFirstLetter(side);

    let elVal = 0;
    let len = calcElements.length;
    let maxEl;
    let maxVal = 0;
    let timer = performance.now();

    calcElements.forEach((element) => {
      if (
        !hasTags &&
        hasCheckVisibility &&
        !element.checkVisibility(checkVisibilityOptions)
      ) {
        log(`Skipping non-visable element: ${getElementName(element)}`);
        len -= 1;
        return
      }

      elVal =
        element.getBoundingClientRect()[side] +
        parseFloat(getComputedStyle(element).getPropertyValue(`margin-${side}`));

      if (elVal > maxVal) {
        maxVal = elVal;
        maxEl = element;
      }
    });

    timer = performance.now() - timer;

    const logMsg = `
Parsed ${len} element${(len = '' )} in ${timer.toPrecision(3)}ms
${Side} ${hasTags ? 'tagged ' : ''}element found at: ${maxVal}px
Position calculated from HTML element: ${elementSnippet(maxEl)}`;

    if (timer < 1.1 || isInit || hasTags) {
      log(logMsg);
    } else {
      advise(
        `
<rb>Performance Warning</>

Calculateing the page size took an excessive amount of time. To improve performace add the <b>data-iframe-size</> attribute to the ${side} most element on the page.
${logMsg}`,
      );
    }
    return maxVal
  }

  const getAllMeasurements = (dimension) => [
    dimension.bodyOffset(),
    dimension.bodyScroll(),
    dimension.documentElementOffset(),
    dimension.documentElementScroll(),
    dimension.documentElementBoundingClientRect(),
  ];

  const getAllElements = (element) => () =>
    element.querySelectorAll(
      '* :not(head):not(meta):not(base):not(title):not(script):not(link):not(style):not(map):not(area):not(option):not(optgroup):not(template):not(track):not(wbr):not(nobr)',
    );

  function switchToAutoOverflow({
    ceilBoundingSize,
    dimension,
    isHeight,
    scrollSize,
  }) {
    const furthest = isHeight ? 'lowest' : 'right most';
    const side = isHeight ? 'bottom' : 'right';
    const overflowDetectedMessage = `
<rb>Detected content overflowing html element</>
    
This causes <i>iframe-resizer</> to fall back to checking the position of every element on the page in order to calculate the correct dimensions of the iframe. Inspecting the size, ${side} margin, and position of every visable HTML element will have a performace impact on more complex pages. 

To fix this issue, and remove this warning, you can either ensure the content of the page does not overflow the <b><HTML></> element or alternatively you can add the attribute <b>data-iframe-size</> to the elements on the page that you want <i>iframe-resizer</> to use when calculating the dimensions of the iframe. 
  
When present the <i>${side} margin of the ${furthest} element</> with a <b>data-iframe-size</> attribute will be used to set the ${dimension} of the iframe.
    
(Page size: ${scrollSize} > document size: ${ceilBoundingSize})`;

    advise(overflowDetectedMessage);

    if (isHeight) {
      log(`Switching from ${heightCalcMode} to autoOverflow`);
      heightCalcMode = 'autoOverflow';
    } else {
      log(`Switching from ${widthCalcMode} to autoOverflow`);
      widthCalcMode = 'autoOverflow';
    }
  }

  const prevScrollSize = {
    height: 0,
    width: 0,
  };

  const prevBoundingSize = {
    height: 0,
    width: 0,
  };

  const getAdjustedScroll = (getDimension) =>
    getDimension.documentElementScroll() + Math.max(0, getDimension.getOffset());

  function getAutoSize(getDimension, autoOverflow) {
    function returnBoundingClientRect() {
      prevBoundingSize[dimension] = boundingSize;
      prevScrollSize[dimension] = scrollSize;
      return boundingSize
    }

    const isHeight = getDimension === getHeight;
    const dimension = isHeight ? 'height' : 'width';
    const boundingSize = getDimension.documentElementBoundingClientRect();
    const ceilBoundingSize = Math.ceil(boundingSize);
    const floorBoundingSize = Math.floor(boundingSize);
    const scrollSize = getAdjustedScroll(getDimension);
    const sizes = `HTML: ${boundingSize}  Page: ${scrollSize}`;

    switch (true) {
      case !getDimension.enabled():
        return scrollSize

      case !autoOverflow &&
        prevBoundingSize[dimension] === 0 &&
        prevScrollSize[dimension] === 0:
        log(`Initial page size values: ${sizes}`);
        if (getDimension.taggedElement(true) <= ceilBoundingSize) {
          return returnBoundingClientRect()
        }
        break

      case triggerLocked &&
        boundingSize === prevBoundingSize[dimension] &&
        scrollSize === prevScrollSize[dimension]:
        log(`Size unchanged: ${sizes}`);
        return Math.max(boundingSize, scrollSize)

      case boundingSize === 0:
        log(`Page is hidden: ${sizes}`);
        return scrollSize

      case !autoOverflow &&
        boundingSize !== prevBoundingSize[dimension] &&
        scrollSize <= prevScrollSize[dimension]:
        log(
          `New HTML bounding size: ${sizes}`,
          'Previous bounding size:',
          prevBoundingSize[dimension],
        );
        return returnBoundingClientRect()

      case !isHeight:
        return autoOverflow
          ? getDimension.taggedElement()
          : switchToAutoOverflow({
              ceilBoundingSize,
              dimension,
              isHeight,
              scrollSize,
            })

      case !autoOverflow && boundingSize < prevBoundingSize[dimension]:
        log('HTML bounding size decreased:', sizes);
        return returnBoundingClientRect()

      case scrollSize === floorBoundingSize || scrollSize === ceilBoundingSize:
        log('HTML bounding size equals page size:', sizes);
        return returnBoundingClientRect()

      case boundingSize > scrollSize:
        log(`Page size < HTML bounding size: ${sizes}`);
        return returnBoundingClientRect()

      case !autoOverflow:
        log(`Switch to autoOverflow: ${sizes}`);
        switchToAutoOverflow({
          ceilBoundingSize,
          dimension,
          isHeight,
          scrollSize,
        });
        break

      default:
        log(`Content overflowing HTML element: ${sizes}`);
    }

    return Math.max(getDimension.taggedElement(), returnBoundingClientRect())
  }

  const getBodyOffset = () => {
    const { body } = document;
    const style = getComputedStyle(body);

    return (
      body.offsetHeight +
      parseInt(style.marginTop, BASE) +
      parseInt(style.marginBottom, BASE)
    )
  };

  const getHeight = {
    enabled: () => calculateHeight,
    getOffset: () => offsetHeight,
    type: 'height',
    auto: () => getAutoSize(getHeight, false),
    autoOverflow: () => getAutoSize(getHeight, true),
    bodyOffset: getBodyOffset,
    bodyScroll: () => document.body.scrollHeight,
    offset: () => getHeight.bodyOffset(), // Backwards compatibility
    custom: () => customCalcMethods.height(),
    documentElementOffset: () => document.documentElement.offsetHeight,
    documentElementScroll: () => document.documentElement.scrollHeight,
    documentElementBoundingClientRect: () =>
      document.documentElement.getBoundingClientRect().bottom,
    max: () => Math.max(...getAllMeasurements(getHeight)),
    min: () => Math.min(...getAllMeasurements(getHeight)),
    grow: () => getHeight.max(),
    lowestElement: () => getMaxElement('bottom'),
    taggedElement: () => getMaxElement('bottom'),
  };

  const getWidth = {
    enabled: () => calculateWidth,
    getOffset: () => offsetWidth,
    type: 'width',
    auto: () => getAutoSize(getWidth, false),
    autoOverflow: () => getAutoSize(getWidth, true),
    bodyScroll: () => document.body.scrollWidth,
    bodyOffset: () => document.body.offsetWidth,
    custom: () => customCalcMethods.width(),
    documentElementScroll: () => document.documentElement.scrollWidth,
    documentElementOffset: () => document.documentElement.offsetWidth,
    documentElementBoundingClientRect: () =>
      document.documentElement.getBoundingClientRect().right,
    max: () => Math.max(...getAllMeasurements(getWidth)),
    min: () => Math.min(...getAllMeasurements(getWidth)),
    rightMostElement: () => getMaxElement('right'),
    scroll: () =>
      Math.max(getWidth.bodyScroll(), getWidth.documentElementScroll()),
    taggedElement: () => getMaxElement('right'),
  };

  function sizeIFrame(triggerEvent, triggerEventDesc, customHeight, customWidth) {
    function resizeIFrame() {
      height = currentHeight;
      width = currentWidth;
      sendMsg(height, width, triggerEvent);
    }

    function isSizeChangeDetected() {
      const checkTolarance = (a, b) => !(Math.abs(a - b) <= tolerance);

      currentHeight = Math.ceil(
        undefined === customHeight ? getHeight[heightCalcMode]() : customHeight,
      );

      currentWidth = Math.ceil(
        undefined === customWidth ? getWidth[widthCalcMode]() : customWidth,
      );

      return (
        (calculateHeight && checkTolarance(height, currentHeight)) ||
        (calculateWidth && checkTolarance(width, currentWidth))
      )
    }

    const isForceResizableEvent = () => !(triggerEvent in { init: 1, size: 1 });

    const isForceResizableCalcMode = () =>
      (calculateHeight && heightCalcMode in resetRequiredMethods) ||
      (calculateWidth && widthCalcMode in resetRequiredMethods);

    function checkDownSizing() {
      if (isForceResizableEvent() && isForceResizableCalcMode()) {
        resetIFrame(triggerEventDesc);
      }
    }

    let currentHeight;
    let currentWidth;

    if (isSizeChangeDetected() || triggerEvent === 'init') {
      lockTrigger();
      resizeIFrame();
    } else {
      checkDownSizing();
    }
  }

  function sendSize(triggerEvent, triggerEventDesc, customHeight, customWidth) {
    if (document.hidden) {
      // Currently only correctly supported in firefox
      // This is checked again on the parent page
      log('Page hidden - Ignored resize request');
      return
    }

    if (!(triggerEvent in nonLoggableTriggerEvents)) {
      log(`Trigger event: ${triggerEventDesc}`);
    }

    sizeIFrame(triggerEvent, triggerEventDesc, customHeight, customWidth);
  }

  function lockTrigger() {
    if (triggerLocked) return

    triggerLocked = true;
    log('Trigger event lock on');

    requestAnimationFrame(() => {
      triggerLocked = false;
      log('Trigger event lock off');
      log('--');
    });
  }

  function triggerReset(triggerEvent) {
    height = getHeight[heightCalcMode]();
    width = getWidth[widthCalcMode]();

    sendMsg(height, width, triggerEvent);
  }

  function resetIFrame(triggerEventDesc) {
    const hcm = heightCalcMode;
    heightCalcMode = heightCalcModeDefault;

    log(`Reset trigger event: ${triggerEventDesc}`);
    lockTrigger();
    triggerReset('reset');

    heightCalcMode = hcm;
  }

  function sendMsg(height, width, triggerEvent, msg, targetOrigin) {
    if (mode < 0) return

    function setTargetOrigin() {
      if (undefined === targetOrigin) {
        targetOrigin = targetOriginDefault;
        return
      }

      log(`Message targetOrigin: ${targetOrigin}`);
    }

    function sendToParent() {
      const size = `${height + offsetHeight}:${width + offsetWidth}`;
      const message = `${myID}:${size}:${triggerEvent}${undefined === msg ? '' : `:${msg}`}`;

      log(
        `Sending message to host page (${message}) via ${sameDomian ? 'sameDomain' : 'postMessage'}`,
      );

      if (sameDomian) {
        window.parent.iframeParentListener(msgID + message);
        return
      }

      target.postMessage(msgID + message, targetOrigin);
    }

    setTargetOrigin();
    sendToParent();
  }

  function receiver(event) {
    const processRequestFromParent = {
      init: function initFromParent() {
        initMsg = event.data;
        target = event.source;

        init();
        firstRun = false;
        setTimeout(() => {
          initLock = false;
        }, eventCancelTimer);
      },

      reset() {
        if (initLock) {
          log('Page reset ignored by init');
          return
        }
        log('Page size reset by host page');
        triggerReset('resetPage');
      },

      resize() {
        sendSize('resizeParent', 'Parent window requested size check');
      },

      moveToAnchor() {
        inPageLinks.findTarget(getData());
      },

      inPageLink() {
        this.moveToAnchor();
      }, // Backward compatibility

      pageInfo() {
        const msgBody = getData();
        log(`PageInfo received from parent: ${msgBody}`);
        if (onPageInfo) {
          onPageInfo(JSON.parse(msgBody));
        } else {
          // not expected, so cancel more messages
          sendMsg(0, 0, 'pageInfoStop');
        }
        log(' --');
      },

      parentInfo() {
        const msgBody = getData();
        log(`ParentInfo received from parent: ${msgBody}`);
        if (onParentInfo) {
          onParentInfo(Object.freeze(JSON.parse(msgBody)));
        } else {
          // not expected, so cancel more messages
          sendMsg(0, 0, 'parentInfoStop');
        }
        log(' --');
      },

      message() {
        const msgBody = getData();
        log(`onMessage called from parent: ${msgBody}`);
        // eslint-disable-next-line sonarjs/no-extra-arguments
        onMessage(JSON.parse(msgBody));
        log(' --');
      },
    };

    const isMessageForUs = () => msgID === `${event.data}`.slice(0, msgIdLen);

    const getMessageType = () => event.data.split(']')[1].split(':')[0];

    const getData = () => event.data.slice(event.data.indexOf(':') + 1);

    const isMiddleTier = () =>
      'iframeResize' in window ||
      (window.jQuery !== undefined && '' in window.jQuery.prototype);

    // Test if this message is from a child below us. This is an ugly test, however, updating
    // the message format would break backwards compatibility.
    const isInitMsg = () => event.data.split(':')[2] in { true: 1, false: 1 };

    function callFromParent() {
      const messageType = getMessageType();

      if (messageType in processRequestFromParent) {
        processRequestFromParent[messageType]();
        return
      }

      if (!isMiddleTier() && !isInitMsg()) {
        warn(`Unexpected message (${event.data})`);
      }
    }

    function processMessage() {
      if (firstRun === false) {
        callFromParent();
        return
      }

      if (isInitMsg()) {
        processRequestFromParent.init();
        return
      }

      log(
        `Ignored message of type "${getMessageType()}". Received before initialization.`,
      );
    }

    if (isMessageForUs()) {
      processMessage();
    }
  }

  // Normally the parent kicks things off when it detects the iFrame has loaded.
  // If this script is async-loaded, then tell parent page to retry init.
  function chkLateLoaded() {
    if (document.readyState !== 'loading') {
      window.parent.postMessage('[iFrameResizerChild]Ready', '*');
    }
  }

  // Don't run for server side render
  if (typeof window !== 'undefined') {
    window.iframeChildListener = (data) => receiver({ data, sameDomian: true });
    addEventListener(window, 'message', receiver);
    addEventListener(window, 'readystatechange', chkLateLoaded);
    chkLateLoaded();
  }

  // TEST CODE START //
  function mockMsgListener(msgObject) {
    receiver(msgObject);
    return win
  }

  try {
    // eslint-disable-next-line no-restricted-globals
    if (top?.document?.getElementById('banner')) {
      win = {};

      // Create test hooks
      window.mockMsgListener = mockMsgListener;

      removeEventListener(window, 'message', receiver);

      define([], () => mockMsgListener);
    }
  } catch (error) {
    // do nothing
  }

  // TEST CODE END //

})();

</script>
